<h2 class="page-title mb-1">Profile</h2>

<div class="container">
    @if (isEditing) {
        <h2>Edit Profile</h2>
        <EditForm Model="profileDTO" OnValidSubmit="SaveChanges">
            <div class="form-group">
                <label for="profileImage">Profile Image</label>
                <img id="profileImagePreview" src="img/default-avatar.png" alt="Profile Image Preview">
                @* <input type="file" id="profileImage" name="profileImage" accept="image/*"> *@
            </div>
            <div class="form-group">
                <label>First Name</label>
                <input @bind="profileDTO.FirstName" type="text" required>
            </div>
            <div class="form-group">
                <label>Last Name</label>
                <input @bind="profileDTO.LastName" type="text" required>
            </div>
            <div class="form-group">
                <label>Userame</label>
                <input @bind="profileDTO.UserName" type="text" required>
            </div>
            <div class="form-group">
                <label>Phone Number</label>
                <input @bind="profileDTO.Phone" type="number" minlength="10" maxlength="10" required>
            </div>
            <div class="form-group">
                <label for="location">Country</label>
                <select @bind="countryId" @bind:event="oninput" @onchange="OnCountryChange">
                    <option value="">Select Country</option>
                    @foreach (var country in countries)
                    {
                        <option value="@country.Id">@country.Name</option>
                    }
                </select>
                <label>Region</label>
                <select @bind="regionId" @bind:event="oninput" @onchange="OnRegionChange">
                    <option value="">Select Region</option>
                    @if (regions != null) {
                        @foreach (var region in regions)
                        {
                            <option value="@region.Id">@region.Name</option>
                        }
                    }
                </select>
                <label>City</label>
                <select @bind="profileDTO.LocationId">
                    <option value="">Select City</option>
                    @if (cities != null) {
                        @foreach (var city in cities)
                        {
                            <option value="@city.Id">@city.Name</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Headline</label>
                <input @bind="profileDTO.Headline" type="text">
            </div>
            <AuthorizeView Roles="Freelancer">
                <Authorized Context="form">
                    <div class="form-group">
                        <label for="fields">Fields</label>
                        @foreach(var field in freelancerFields) {
                            <span @onclick="@(() => removeField(@field))">@AllFields.FirstOrDefault(f => f.Id == field.FieldId).Name<i>x</i></span>
                        }
                        <select @bind="@FieldId">
                            <option value="">Select Fields</option>
                            @foreach (var fld in AllFields) {
                                <option value="@fld.Id" @onclick="AddField">@fld.Name</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="skills">Skills</label>
                        @foreach(var skill in freelancerSkills) {
                            <span @onclick="@(() => removeSkill(@skill))">@AllSkills.FirstOrDefault(s => s.Id == skill.SkillId).Name<i>x</i></span>
                        }
                        <select @bind="@SkillId">
                            <option value="">Select Skills</option>
                            @foreach (var skl in AllSkills) {
                                <option value="@skl.Id" @onclick="AddSkill">@skl.Name</option>
                            }
                        </select>
                        
                    </div>
                </Authorized>
            </AuthorizeView>
            <div class="form-group">
                <button type="submit">Save Changes</button>
                <h6 class="close" @onclick="EditProfile">Close</h6>
            </div>
        </EditForm>

    } else {
        <h2>User Profile</h2>
        <div class="profile-details">
            <img src="img/default-avatar.png" alt="Profile Image" class="profile-image">
            <div class="profile-info">
                <p><strong>Full Name: </strong> @profileDTO.FirstName @profileDTO.LastName </p>
                <p><strong>Username: </strong> @profileDTO.UserName </p>
                <p><strong>Headline: </strong> @profileDTO.Headline </p>
                <p><strong>Phone: </strong> @profileDTO.Phone </p>
                <p><strong>Email: </strong> @profileDTO.Email </p>
                <p><strong>Location: </strong> @profileDTO.Location </p>
                <AuthorizeView Roles="Freelancer1">
                    <Authorized>
                        <p><strong>Fields: </strong> @profileDTO.FreelancerFields </p>
                        <p><strong>Skills: </strong> @profileDTO.FreelancerSkills </p>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
        <button class="edit-button" @onclick="EditProfile">Edit Profile</button>
    }
</div>

@code {
    [Parameter]
    public string LoggedInUserId { get; set; }
    private bool isEditing = false;

    private int countryId { get; set; }
    private int regionId { get; set; }
    private List<Location> countries = new List<Location>();
    private List<Location>? regions = new List<Location>();
    private List<Location>? cities = new List<Location>();

    private int SkillId { get; set; }
    private int FieldId { get; set; }
    private string endpoint = "countries";

    List<FreelancerSkill> freelancerSkills = new List<FreelancerSkill>();
    List<FreelancerField> freelancerFields = new List<FreelancerField>();

    ProfileDTO profileDTO = new ProfileDTO();
    List<Field> AllFields = new List<Field>();
    List<Skill> AllSkills = new List<Skill>();

    


    private void AddSkill() {
        foreach(var ss in freelancerSkills) {
            if (ss.SkillId == SkillId)
                return;
        }
        freelancerSkills.Add(new FreelancerSkill() {
            SkillId = SkillId,
            UserId = LoggedInUserId
        });
    }
    private void AddField() {

        foreach(var ff in freelancerFields) {
            if (ff.FieldId == FieldId)
                return;
        }
        freelancerFields.Add(new FreelancerField() {
            FieldId = FieldId,
            UserId = LoggedInUserId
        });
    }
    private void removeSkill(FreelancerSkill element) {
        freelancerSkills.Remove(element);
    }
    private void removeField(FreelancerField element) {
        freelancerFields.Remove(element);
    }
    private void EditProfile() {
        isEditing = !isEditing;
    }

    private async Task SaveChanges() {
        profileDTO.TopFields = freelancerFields;
        profileDTO.TopSkills = freelancerSkills;
        await ProfileService.UpdateProfileAsync(profileDTO, LoggedInUserId);
        Navigation.NavigateTo("/user/profile", forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        countries = await LocationService.GetLocations(endpoint);
        endpoint = "regions/";

        profileDTO = await ProfileService.GetUserProfileAsync(LoggedInUserId);

        AllFields = await FieldService.GetAllFieldsAsync();
        AllSkills = await SkillService.GetAllSkillsAsync();

        foreach(var ff in profileDTO.TopFields) {
            freelancerFields.Add(
                new FreelancerField {
                    FieldId = ff.FieldId,
                    UserId = ff.UserId
                }
            );
        }
        foreach(var ss in profileDTO.TopSkills) {
            freelancerSkills.Add(
                new FreelancerSkill {
                    SkillId = ss.SkillId,
                    UserId = ss.UserId
                }
            );
        }
    }


    private async Task OnCountryChange()
    {
        regions = await LocationService.OnLocationChange(countryId, endpoint);
        if (regions != null)
            endpoint = "cities/";
    }

    private async Task OnRegionChange()
    {
        cities = await LocationService.OnLocationChange(regionId, endpoint);
    }
}