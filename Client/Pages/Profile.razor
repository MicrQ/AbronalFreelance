<h2 class="page-title mb-1">Profile</h2>

<div class="container">
    @if (isEditing) {
        <h2>Edit Profile</h2>
        <form>
            <div class="form-group">
                <label for="profileImage">Profile Image</label>
                <img id="profileImagePreview" src="img/default-avatar.png" alt="Profile Image Preview">
                <input type="file" id="profileImage" name="profileImage" accept="image/*">
            </div>
            <div class="form-group">
                <label for="firstName">First Name</label>
                <input type="text" id="firstName" name="firstName" required>
            </div>
            <div class="form-group">
                <label for="lastName">Last Name</label>
                <input type="text" id="lastName" name="lastName" required>
            </div>
            <div class="form-group">
                <label for="location">Location</label>
                <select @bind="countryId" @bind:event="oninput" @onchange="OnCountryChange">
                    <option value="">Select Country</option>
                    @foreach (var country in countries)
                    {
                        <option value="@country.Id">@country.Name</option>
                    }
                </select>
                <label>Region</label>
                <select @bind="regionId" @bind:event="oninput" @onchange="OnRegionChange">
                    <option value="">Select Region</option>
                    @if (regions != null) {
                        @foreach (var region in regions)
                        {
                            <option value="@region.Id">@region.Name</option>
                        }
                    }
                </select>
                <label>City</label>
                <select > @*bind city Id here*@
                    <option value="">Select City</option>
                    @if (cities != null) {
                        @foreach (var city in cities)
                        {
                            <option value="@city.Id">@city.Name</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="headline">Headline</label>
                <input type="text" id="headline" name="headline" required>
            </div>
            <div class="form-group">
                <label for="educationLevel">Education Level</label>
                <select id="educationLevel" name="educationLevel" required>
                    <option value="">Select Education Level</option>
                    <option value="High School">High School</option>
                    <option value="Bachelor's Degree">Bachelor's Degree</option>
                    <option value="Master's Degree">Master's Degree</option>
                    <option value="PhD">PhD</option>
                    
                </select>
            </div>
            <div class="form-group">
                <label for="fields">Fields</label>
                @foreach(string field in Fields) {
                    <span @onclick="@(() => removeField(@field))">@field <i>x</i></span>
                }
                <div class="fields">
                    <input @bind="@Field" type="text" class="skill-input">
                    <button @onclick="AddField" class="add-btn">Add Fields</button>
                </div>
            </div>
            <div class="form-group">
                <label for="skills">Skills</label>
                @foreach(string skill in Skills) {
                    <span @onclick="@(() => removeSkill(@skill))">@skill <i>x</i></span>
                }
                <div class="skills">
                    <input @bind="@Skill" type="text" class="skill-input">
                    <button @onclick="AddSkill" class="add-btn">Add Skill</button>
                </div>
                
            </div>
            <div class="form-group">
                <button type="submit" @onclick="SaveChanges">Save Changes</button>
                <h6 class="close" @onclick="EditProfile">Close</h6>
            </div>
        </form>

    } else {
        <h2>User Profile</h2>
        <div class="profile-details">
            <img src="img/default-avatar.png" alt="Profile Image" class="profile-image">
            <div class="profile-info">
                <p><strong>First Name:</strong> firstName</p>
                <p><strong>Last Name:</strong> lastName</p>
                <p><strong>Location:</strong> location</p>
                <p><strong>Headline:</strong> headline</p>
                <p><strong>Education Level:</strong> educationLevel</p>
                <p><strong>Fields:</strong> fields</p>
                <p><strong>Skills:</strong> skills</p>
            </div>
        </div>
        <button class="edit-button" @onclick="EditProfile">Edit Profile</button>
    }
</div>

@code {
    private bool isEditing = false;

    private int countryId { get; set; }
    private int regionId { get; set; }
    private List<Location> countries = new();
    private List<Location>? regions = null;
    private List<Location>? cities = null;

    private string Skill { get; set; } = string.Empty;
    private string Field { get; set; } = string.Empty;
    private string endpoint = "countries";

    List<string> Skills = new List<string>();
    List<string> Fields = new List<string>();
    


    private void AddSkill() {
        if (!Skills.Contains(Skill) && !string.IsNullOrEmpty(Skill)){
            Skills.Add(Skill);
            Skill = string.Empty;
        }
    }
    private void AddField() {
        if (!Fields.Contains(Field) && !string.IsNullOrEmpty(Field)){
            Fields.Add(Field);
            Field = string.Empty;
        }
    }
    private void removeSkill(string element) {
        Skills.Remove(element);
    }
    private void removeField(string element) {
        Fields.Remove(element);
    }
    private void EditProfile()
    {
        isEditing = !isEditing;
    }
    private void SaveChanges() {

    }

    protected override async Task OnInitializedAsync()
    {
        countries = await LocationService.GetLocations(endpoint);
        endpoint = "regions/";
    }


     private async Task OnCountryChange()
    {
        regions = await LocationService.OnLocationChange(countryId, endpoint);
        if (regions != null)
            endpoint = "cities/";
    }

    private async Task OnRegionChange()
    {
        cities = await LocationService.OnLocationChange(regionId, endpoint);
    }
}