@page "/register"
@inject IAccount AccountService
@inject ILocation LocationService


<NavMenu />
<!-- Main Start -->
<main>
    <!-- Breadcrumb -->
    <section
    class="w-breadcrumb-area"
    style="
        background: url('img/common/breadcrumb-bg.png') no-repeat
        center center/cover;
    ">
    <div class="container">
        <div class="row">
        <div class="col-auto">
        </div>
        </div>
    </div>
    </section>
    <!-- Breadcrumb End -->

    <!-- Login Form -->
    <section class="py-110 bg-offWhite">
    <div class="container">
        <div class="mb-5">
        <div class="row justify-content-center">
            <div class="col-auto">
                <div class="d-flex align-items-center gap-3">
                    <p style="cursor: pointer;" class="@freelancerClass" @onclick="regFreelancer">Freelancer</p>
                    <p style="cursor: pointer;" class="@clientClass" @onclick="regClient">Client</p> <!-- change the class based on the user action -->
                </div>
            </div>
        </div>
    </div>
    <div class="bg-white rounded-3 p-3">
        <div class="row g-4">
            <div class="col-lg-6 p-3 p-lg-5">
                <div class="mb-40">
                    <h2 class="section-title mb-2">Sign up</h2>
                    <p class="section-desc">Welcome to Abronal Freelance</p>
                </div>
                <EditForm Model="registerModel" OnValidSubmit="RegisterAsync">
                    <div class="form-container">
                        <div class="row gy-3">
                            <div class="form-input col-lg-6">
                                <label for="fname" class="form-label">First Name <span class="text-lime-300">*</span></label>
                                <input @bind="registerModel.FirstName" type="text" id="fname" placeholder="First Name" class="form-control shadow-none" required />
                            </div>
                            <div class="form-input col-lg-6">
                                <label for="lname" class="form-label">Last Name <span class="text-lime-300">*</span></label>
                                <input @bind="registerModel.LastName" type="text" id="lname" placeholder="Last Name" class="form-control shadow-none" required />
                            </div>
                            <div class="form-input col-lg-6">
                                <label for="username" class="form-label">Username <span class="text-lime-300">*</span></label>
                                <input @bind="registerModel.UserName" type="text" id="username" placeholder="Username" class="form-control shadow-none" required />
                            </div>
                            <div class="form-input col-lg-6">
                                <label for="phone" class="form-label">Phone <span class="text-lime-300">*</span></label>
                                <input @bind="registerModel.PhoneNumber" type="text" id="phone" placeholder="09403817190" class="form-control shadow-none" required />
                            </div>
                            <div class="form-input col-lg-6">
                                <label for="phone" class="form-label">Email <span class="text-lime-300">*</span></label>
                                <input @bind="registerModel.Email" type="email" id="email" placeholder="example@email.com" class="form-control shadow-none" required />
                            </div>
                            <div class="form-input col-lg-6">
                                <label for="country" class="form-label">Country <span class="text-lime-300">*</span></label>
                                <select @bind="countryId" @bind:event="oninput" @onchange="OnCountryChange"
                                class="form-select shadow-none" name="country" id="country" required>
                                    <option value="1">Select Country</option>
                                    @foreach (var country in countries)
                                    {
                                        <option value="@country.Id">@country.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="form-input col-lg-6">
                                <label for="region" class="form-label">Region <span class="text-lime-300">*</span></label>
                                <select @bind="regionId" @bind:event="oninput" @onchange="OnRegionChange"
                                class="form-select shadow-none" name="country" id="country" required>
                                    <option value="1">Select City</option>
                                    @if (regions != null) {
                                        @foreach (var region in regions)
                                        {
                                            <option value="@region.Id">@region.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="form-input col-lg-6">
                                <label for="city" class="form-label">City <span class="text-lime-300">*</span></label>
                                <select @bind="registerModel.LocationId"
                                class="form-select shadow-none" name="country" id="country" required>
                                    <option value="1">Select City</option>
                                    @if (cities != null) {
                                        @foreach (var city in cities)
                                        {
                                            <option value="@city.Id">@city.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="form-input col-lg-12">
                                <label for="password" class="form-label">Password <span class="text-lime-300">*</span></label>
                                <input @bind="registerModel.Password" type="password" id="password" placeholder="********" class="form-control shadow-none" required />
                            </div>
                            <div class="form-input col-lg-12">
                                <label for="confirm-password" class="form-label">Confirm Password <span class="text-lime-300">*</span></label>
                                <input @bind="registerModel.ConfirmPassword" type="password" id="confirm-password" placeholder="********" class="form-control shadow-none" required />
                            </div>
                        </div>
                        <div class="d-grid mt-4">
                            @if (showMessage) {<p class="text-danger">@message</p>}
                            <button class="w-btn-secondary-lg">Create Account</button>
                        </div>
                    </div>
                </EditForm>
                <div class="mt-3">
                    <p class="text-center form-text">Already have an account ? <a href="login"> Login </a></p>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="login-img">
                    <img src="img/others/1.png" class="img-fluid w-100" alt="" />
                </div>
            </div>
        </div>
    </div>
</div>

    </section>
    <!-- Login Form End -->
</main>
<!-- Maine End -->

<Footer />

@code {
    private RegisterDTO registerModel = new();
    private List<Location> countries = new();
    private List<Location>? regions = null;
    private List<Location>? cities = null;
    private string endpoint = "countries";
    private string clientClass = "w-form-btn-outline";
    private string freelancerClass = "w-form-btn";
    private bool showMessage = false;
    private string message = "";

    private int countryId;
    private int regionId;

    
    private async Task RegisterAsync()
    {
        if (registerModel.Password != registerModel.ConfirmPassword) {
            message = "Password doesn't match";
            showMessage = true;
            return;
        }

        var result = await AccountService.RegisterUserAsync(registerModel);
        var customAuthStateProvider = (CustomAuthState)AuthStateProvider;



        Navigation.NavigateTo("/login");
    }

    protected override async Task OnInitializedAsync()
    {
        countries = await LocationService.GetLocations(endpoint);
        endpoint = "regions/";

        registerModel.Role = "Freelancer";
    }


     private async Task OnCountryChange()
    {
        regions = await LocationService.OnLocationChange(countryId, endpoint);
        if (regions != null)
            endpoint = "cities/";
    }

    private async Task OnRegionChange()
    {
        cities = await LocationService.OnLocationChange(regionId, endpoint);
    }

    private void regClient()
    {
        registerModel.Role = "Client";
        clientClass = clientClass == "w-form-btn" ? "w-form-btn-outline" : "w-form-btn";
        freelancerClass = freelancerClass == "w-form-btn" ? "w-form-btn-outline" : "w-form-btn";

    }

    private void regFreelancer()
    {
        registerModel.Role = "Freelancer";
        clientClass = clientClass == "w-form-btn" ? "w-form-btn-outline" : "w-form-btn";
        freelancerClass = freelancerClass == "w-form-btn" ? "w-form-btn-outline" : "w-form-btn";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setHeroImageHeight");
        }
    }
}
