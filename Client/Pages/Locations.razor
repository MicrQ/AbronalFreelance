@page "/locations"
@inject HttpClient http
@inject NavigationManager Navigate
@inject IJSRuntime js

<h3>Locations</h3>

@if (locations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Location ID</th>
                <th>Location Name</th>
                <th>Location Type ID</th>
                <th>Parent ID</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var location in locations)
            {
                <tr>
                    <td>@location.Id</td>
                    <td>@location.Name</td>
                    <td>@location.LocationTypeId</td>
                    @if (@location.ParentId != null) {
                        <td>@location.ParentId</td>
                    } else { <td>NULL</td>}
                    <td>@location.isActive</td>
                    <td>
                        <button @onclick="@(edit => Edit(@location.Id))">EDIT</button>
                        <button @onclick="@(del => Delete(@location.Id))">DELETE</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Location> locations;

    private void Edit(int id)
    {
        Navigate.NavigateTo($"/location/edit/{id}");
    }
    private async void Delete(int id)
    {
        await http.DeleteAsync($"api/location/{id}");
        await js.InvokeVoidAsync("location.reload");
    }

    protected override async Task OnInitializedAsync()
    {
        locations = await http.GetFromJsonAsync<List<Location>>("api/locations");
    }
}
