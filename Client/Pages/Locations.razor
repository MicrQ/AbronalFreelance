@page "/locations"
@inject HttpClient http
@inject NavigationManager Navigate
@inject IJSRuntime js
@inject ILocation locationService
@attribute [Authorize(Roles = "Admin")]
<AuthorizeView Roles="Admin">
    <Authorized>
        <h3>Locations</h3>

        @if (locations == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <button @onclick="AddLocation">New Location</button>
            <table class="table">
                <thead>
                    <tr>
                        <th>Location Id</th>
                        <th>Location Name</th>
                        <th>Location Type</th>
                        <th>Parent</th>
                        <th>IsActive</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var location in locations)
                    {
                        <tr>
                            <td>@location.Id</td>
                            <td>@location.Name</td>
                            <td>@locationTypes.FirstOrDefault(lt => lt.Id == location.LocationTypeId).Name</td>


                            @if (@location.ParentId != null) {
                                <td>@locations.FirstOrDefault(loc => loc.Id == location.ParentId).Name</td>
                            } else { <td>NULL</td>}
                            
                            <td>@location.isActive</td>
                            <td>
                                <button @onclick="@(edit => Edit(@location.Id))">EDIT</button>
                                <button @onclick="@(del => Delete(@location.Id))">DELETE</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        404 page
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Location> locations = new List<Location>();
    private List<LocationType> locationTypes = new List<LocationType>();

    private async Task FetchLocation() {
        locations = await locationService.GetAllLocations();
    }

    private void AddLocation() {
        Navigate.NavigateTo("/location/add");
    }

    private void Edit(int id)
    {
        Navigate.NavigateTo($"/location/edit/{id}");
    }
    private async Task Delete(int id)
    {
        await locationService.DeleteLocation(id);
        await FetchLocation();
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchLocation();
        locationTypes = await locationService.GetLocationTypes();
    }
}