@page "/location/{action}/{id?}"
@inject HttpClient http
@inject ILocation locationService
@inject NavigationManager Navigate

@if (valid) {
    <div class="main-container">
        <h3>Location</h3>
        <div class="form-box">
            <EditForm Model="LocationDTO" OnValidSubmit="Save">
                <label>Name</label><br />
                <input @bind="LocationDTO.Name" Type="text"><br />
                <label>Location Type</label><br />
                <select @bind="LocationDTO.LocationTypeId" @bind:event="oninput" @onchange="fetchParent">
                    @foreach (var locationType in LocationTypes) {
                        <option value="@locationType.Id">@locationType.Name</option>
                    }
                </select><br />

                @* fetching possible parent locations based on the selected location type*@
                <label>Parent</label><br />
                <select @bind="LocationDTO.ParentId">
                    @foreach (var parent in Parents) {
                        <option value="@parent.Id">@parent.Name</option>
                    }
                </select><br />

                
            </EditForm>
        </div>

    </div>
} else {
    <h3>404 page</h3>
}



@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Action { get; set; }
    private string value { get; set; }
    private Location Location = new Location();
    private LocationDTO LocationDTO = new LocationDTO();
    private List<LocationType> LocationTypes = new List<LocationType>();
    private List<Location>? Parents = new List<Location>();
    private string BtnName { get; set; } = "Save";
    private bool valid = true;

    protected override async Task OnInitializedAsync()
    {
        if (Action == "edit" && Id != null)
        {
            BtnName += " Changes";
            Location = await locationService.GetLocation(Convert.ToInt32(Id));
            //if (Location == null)
              //  valid = false;
        }
        LocationTypes = await locationService.GetLocationTypes();
    }

    private async Task fetchParent() {
        if (LocationDTO.LocationTypeId > 1) {
            Parents = await locationService.GetLocationsByType(LocationDTO.LocationTypeId - 1);
        }
    }

    private void Save() {
        
    }
    
}
