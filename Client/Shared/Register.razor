@page "/register"
@inject IAccount AccountService
@inject ILocation LocationService

<div class="register-container">
    <div class="hero-image"></div>

    @if (!showForm) {
        <div class="option-container">
            <h2>Create Account as</h2>
            <div class="option-box">
                <div class="option client" @onclick="regClient">
                    <h3>Client</h3>
                    <p>Get your jobs done by professionals.</p>
                </div>
                <div class="option freelancer" @onclick="regFreelancer">
                    <h3>Freelancer</h3>
                    <p>Find a job, get unlimited income.</p>
                </div>
            </div>
        </div>
    } else {
        <div class="register-box">
            <h1>Register</h1>
            <EditForm Model="registerModel" OnValidSubmit="RegisterAsync">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <div class="left-form">
                        <label>First Name</label>
                        <input @bind="registerModel.FirstName" Placeholder="Mike" class="firstname-input" Type="text">
                        <label>Last Name</label>
                        <input @bind="registerModel.LastName" Placeholder="Tyson" class="lastname-input" Type="text">
                        <label>Username</label>
                        <input @bind="registerModel.UserName" Placeholder="Mike_T" class="username-input" Type="text">
                        <label>Phone</label>
                        <input @bind="registerModel.PhoneNumber" Placeholder="910123456" Type="text" class="phone-input">
                    </div>
                    <div class="right-form">
                        <label>Email</label>
                        <input @bind="registerModel.Email" Placeholder="Email" Type="email" class="email-input">
                        <label>Password</label>
                        <input @bind="registerModel.Password" Placeholder="Password" Type="password" class="pass-input">
                        <label>Confirm Password</label>
                        <input @bind="registerModel.ConfirmPassword" Placeholder="Confirm Password" Type="password" class="pass-confirm">
                        <label>Location</label>
                        <label>Country</label>
                        <select @bind="countryId" @bind:event="oninput" @onchange="OnCountryChange">
                            <option value="">Select Country</option>
                            @foreach (var country in countries)
                            {
                                <option value="@country.Id">@country.Name</option>
                            }
                        </select>
                        <label>Region</label>
                        <select @bind="regionId" @bind:event="oninput" @onchange="OnRegionChange">
                            <option value="">Select Region</option>
                            @if (regions != null) {
                                @foreach (var region in regions)
                                {
                                    <option value="@region.Id">@region.Name</option>
                                }
                            }
                        </select>
                        <label>City</label>
                        <select @bind="registerModel.LocationId">
                            <option value="">Select City</option>
                            @if (cities != null) {
                                @foreach (var city in cities)
                                {
                                    <option value="@city.Id">@city.Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="signup-btn">
                    <button type="submit">Sign Up</button>
                </div>
                <h6><a href="have-acc">Already have an account?</a></h6>
            </EditForm>
        </div>
    }
</div>


@code {
    private RegisterDTO registerModel = new();
    private List<Location> countries = new();
    private List<Location>? regions = null;
    private List<Location>? cities = null;
    private string endpoint = "countries";

    private int countryId;
    private int regionId;
    private bool showForm = false;

    
    private async Task RegisterAsync()
    {
        var result = await AccountService.RegisterUserAsync(registerModel);
        var customAuthStateProvider = (CustomAuthState)AuthStateProvider;

        Navigation.NavigateTo("/", forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        countries = await LocationService.GetLocations(endpoint);
        endpoint = "regions/";
    }


     private async Task OnCountryChange()
    {
        regions = await LocationService.OnLocationChange(countryId, endpoint);
        if (regions != null)
            endpoint = "cities/";
    }

    private async Task OnRegionChange()
    {
        cities = await LocationService.OnLocationChange(regionId, endpoint);
    }

    private void regClient()
    {
        registerModel.Role = "Client";
        showForm = true;
    }

    private void regFreelancer()
    {
        registerModel.Role = "Freelancer";
        showForm = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setHeroImageHeight");
        }
    }
}
